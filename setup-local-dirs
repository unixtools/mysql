#!/usr/bin/perl

use strict;
use Getopt::Long;
use LWP::Simple;

my $help    = 0;
my $cluster = 0;
my $subversion;

my $mirror;
my $version;
my $flavor = "mariadb";

my $skip  = 0;
my $debug = 0;
my $force = 0;
my $seed;
if ( -e "/local/mysql/cluster" ) {
    $cluster = 1;
}

my @save_argv = @ARGV;
print "$0: launched with ", join( " ", @ARGV ), "\n";

my $res = GetOptions(
    "debug+"       => \$debug,
    "cluster"      => \$cluster,
    "force"        => \$force,
    "help"         => \$help,
    "flavor=s"     => \$flavor,
    "version=s"    => \$version,
    "subversion=s" => \$subversion,
    "seed=s"       => \$seed,
    "mirror=s"     => \$mirror,
    "skip"         => \$skip
);
if ( !$res || $help ) {
    print
        "Usage: $0 [--flavor=mariadb|oracle] [--version=10.5|10.3|5.7|...] [--subversion=#] [--seed=host] [--mirror=host::mariadb] [--cluster] [--skip] [--debug] [--help]\n";
    exit(1);
}

if ( !$mirror ) {
    if ( $flavor eq "mariadb" ) {

        # Alternative mirror: mirrors.syringanetworks.net::mariadb
        $mirror = "mirror.lstn.net::mariadb";
    }
    elsif ( $flavor eq "oracle" ) {

        # Alternative mirror: rsync://rsync.mirrorservice.org/ftp.mysql.com/
        $mirror = "mysql.he.net::mysql";
    }
}

if ( !$version ) {
    if ( $flavor eq "mariadb" ) {
        $version = "10.5";
    }
    else {
        $version = "5.7";
    }
}

if ( !-e "/local/mysql" ) {
    print "Must run from /local/mysql.\n";
    die;
}

if ( !getpwnam("mysql") ) {
    print "Userid 'mysql' must exist:\n\n";
    print "  Fedora/RH/CentOS: adduser -d /local/mysql mysql\n";
    print "  Ubuntu: adduser --quiet --gecos \"\" --disabled-password --home /local/mysql mysql\n";
    die;
}

# Determine compiled in paths for system libs
my $def_socket = "/var/lib/mysql/mysql.sock";
if ( -e "/usr/bin/mysql" ) {
    open( my $in, "-|", "strings", "/usr/bin/mysql" );
    while ( defined( my $line = <$in> ) ) {
        if ( $line =~ m|^(/.*mysqld*.sock)$|o ) {
            $def_socket = $1;
            print "Found default socket from /usr/bin/mysql: $def_socket\n";
        }
    }
    close($in);
}

# Determine env type
my $is_rpm = 0;
my $is_deb = 0;
if ( ( -e "/bin/rpm" || -e "/usr/bin/rpm" ) && ( !-e "/usr/bin/apt-get" ) ) {
    $is_rpm = 1;
}
elsif ( -e "/usr/bin/apt-get" ) {
    $ENV{DEBIAN_FRONTEND} = "noninteractive";
    $is_deb = 1;
}

chdir("/local/mysql") || die;

print "Attempting update of /local/mysql installation with version $version.\n";
if ($cluster) {
    print "Cluster mode is enabled.\n";
}
print "\n";

if ( $cluster && !-e "/local/mysql/cluster" ) {
    open( my $out, ">/local/mysql/cluster" );
    print $out "\n";
    close($out);
}

if ( !$skip ) {
    print "Attempting update from repository...\n";
    if ( -e "/local/mysql/.git" ) {
        system("git pull");
    }
    print "Done.\n";

    # re-exec to get latest changes
    print "Re-executing self to get latest changes...\n";
    my @cmd = ( $0, "--skip", @save_argv );
    print "Command: ", join( " ", @cmd ), "\n";
    exec(@cmd);
    die "failed to re-exec self.\n";
}

my $arch = "x86_64";
if ( !-e "/lib64" ) {
    $arch = "i686";
}

#
# First determine latest version within the desired series
#
$mirror =~ s|/$||go;
my $match;
if ( $flavor eq "mariadb" ) {
    open( my $in, "-|" ) || exec( "rsync", $mirror . "/" );
    while ( defined( my $line = <$in> ) ) {
        my $best;
        if ( $line =~ /\s\d\d:\d\d:\d\d\s+((mariadb-${version})\.(\d+))\s*$/o ) {
            if ( $subversion && $subversion != $3 ) { next; }
            if ( !$best || $best < $3 ) {
                $match = $1;
                $best  = $3;
            }
        }
    }
    close($in);
}
elsif ( $flavor eq "oracle" ) {
    open( my $in, "-|" ) || exec( "rsync", $mirror . "/Downloads/MySQL-${version}/" );
    while ( defined( my $line = <$in> ) ) {
        my $best;

        # mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz
        if ( $line =~ /\s\d\d:\d\d:\d\d\s+((mysql-${version})\.(\d+)-linux.*x86_64.*.tar.gz)\s*$/o ) {
            if ( $subversion && $subversion != $3 ) { next; }
            if ( !$best || $best < $3 ) {
                $match = $1;
                $best  = $3;
            }
        }
    }
    close($in);

}
if ( !$match ) {
    die "Unable to find match for version($version) subversion($subversion)";
}
print "Proceeding with retrieval from $match\n";

system( "mkdir", "-p", "/local/mysql/tar" );

my $fname;
my $upstream;

if ( $flavor eq "mariadb" ) {
    my $variant;
    if ( $version eq "10.3" ) {
        $variant = "-glibc_214";
    }
    $fname    = "$match-linux${variant}-${arch}.tar.gz";
    $upstream = "$mirror/$match/bintar-linux${variant}-${arch}/$fname";
}
elsif ( $flavor eq "oracle" ) {
    $fname    = $match;
    $upstream = "$mirror/Downloads/MySQL-${version}/$match";
}
my $destfile = "/local/mysql/tar/$fname";

if ($seed) {
    print "Syncing from seed host: $seed\n";
    system( "rsync", "-avzP", "root\@${seed}:/local/mysql/tar/${fname}", $destfile );
}

print "Syncing from upstream: $upstream\n";
system( "rsync", "-avzP", $upstream, $destfile );

my $dirname = $fname;
$dirname =~ s/\.tar\.gz//;

if ( $dirname =~ /(mysql|Percona|mariadb)/ && -e "/local/mysql/$dirname" && $force ) {
    system( "rm", "-rf", "/local/mysql/$dirname" );
}

print "Checking for existence of $dirname:\n";
if ( !-d "/local/mysql/$dirname" ) {
    print "Extracting $fname...\n";
    system( "tar", "--exclude=mysql-test", "--exclude=sql-bench", "-xzf", "tar/$fname" );
    print "Done.\n";
}
else {
    $debug && print "Already extracted $fname.\n";
}

system( "rm", "-rf", "$dirname/mysql-test" );
system( "rm", "-rf", "$dirname/sql-bench" );

system( "mkdir", "-p", "/local/mysql/data" );
system( "mkdir", "-p", "/var/lib/mysql" );

system( "chown", "-R", "mysql:mysql", "/var/lib/mysql" );

unlink("/local/mysql/server");
symlink( "/local/mysql/$dirname", "/local/mysql/server" );

if ( !-e "/local/mysql/mysql.conf" ) {
    print "Installing base config...\n";
    system( "cp", "/local/mysql/mysql-base.conf", "/local/mysql/mysql.conf" );
}

if ( -d "/etc/mysql" ) {
    unlink("/etc/mysql/my.cnf");
    system( "cp", "/local/mysql/client.conf", "/etc/mysql/my.cnf" );
    system( "chown", "root:root", "/etc/mysql/my.cnf" );
}

unlink("/etc/my.cnf");
system( "cp", "/local/mysql/client.conf", "/etc/my.cnf" );
system( "chown", "root:root", "/etc/my.cnf" );

unlink( glob("/home/local/adm/rc-start/rc.*.mysql") );
symlink( "/local/mysql/rc.mysqld", "/home/local/adm/rc-start/rc.400.mysql" );

system( "rm",    "-rf", "/local/mysql-db-backups/bin" );
system( "mkdir", "-p",  "/local/mysql-db-backups/data" );
system( "mkdir", "-p",  "/local/mysql-db-backups/latest" );
system( "chown", "-R",  "mysql:mysql", "/local/mysql" );

#
# Modify socket path in various config files
#
foreach my $cfile ( "/etc/mysql/my.cnf", "/etc/my.cnf", "/local/mysql/mysql.conf" ) {
    next if ( !-e $cfile );
    print "Updating socket path in $cfile.\n";

    open( my $in, "<$cfile" );
    my $cfg = join( "", <$in> );
    close($in);

    my $newcfg = $cfg;
    $newcfg =~ s/^socket=.*?$/socket=$def_socket/sgm;

    if ( $newcfg ne $cfg ) {
        print "Writing new version of changed file ($cfile).\n";
        open( my $out, ">$cfile" );
        print $out $newcfg;
        close($out);
    }
}

# Make sure we have libaio installed
my @aio = ( glob("/usr/lib/libaio*"), glob("/usr/lib64/libaio*"), glob("/lib/x86_64-linux-gnu/libaio*") );
if ($is_rpm) {
    if ( scalar(@aio) < 1 ) {
        print "Installing libaio...\n";
        system( "yum", "-y", "install", "libaio" );
    }

    # Make sure we have mysql client installed
    if ( !-e "/usr/bin/mysql" ) {
        system( "yum", "-y", "install", "mysql" );
    }
    if ( !-e "/usr/bin/mytop" ) {
        system( "yum", "-y", "install", "mytop" );
    }
}
elsif ($is_deb) {
    if ( scalar(@aio) < 1 ) {
        print "Installing libaio...\n";
        system( "apt-get", "-y", "install", "libaio1" );
    }

    # Make sure we have mysql client installed
    if ( !-e "/usr/bin/mysql" ) {
        system( "apt-get", "-y", "install", "mysql-client" );
    }
    if ( !-e "/usr/bin/mytop" ) {
        system( "apt-get", "-y", "install", "mytop" );
    }

}

open( my $ldd, "-|" ) || exec( "ldd", "/local/mysql/server/bin/mysqld", "/local/mysql/server/bin/mysql" );
my $need_crypto    = 0;
my $need_readline5 = 0;
my $need_libnuma   = 0;
while ( defined( my $line = <$ldd> ) ) {
    if ( $line =~ /libcrypto.so./ && $line =~ /not found/ ) {
        print "Missing required library: $line\n";
        $need_crypto++;
    }
    if ( $line =~ /readline.so.5/ && $line =~ /not found/ ) {
        print "Missing required library: $line\n";
        $need_readline5++;
    }
    if ( $line =~ /libnuma.so.1/ && $line =~ /not found/ ) {
        print "Missing required library: $line\n";
        $need_libnuma++;
    }
}
close($ldd);

if ($need_readline5) {
    print "Need to install compat-readline5\n";
    if ($is_rpm) {
        print "Installing compat-readline5...\n";
        system( "yum", "-y", "install", "compat-readline5" );
    }
    elsif ($is_deb) {
        exit;
    }

}

if ($need_libnuma) {
    print "Need to install libnuma\n";
    if ($is_rpm) {
        print "Installing numactl...\n";
        system( "yum", "-y", "install", "numactl" );
    }
    elsif ($is_deb) {
        print "Installing numactl...\n";
        system( "apt-get", "-y", "install", "numactl" );
    }
}

if ($need_crypto) {
    exit;
}

if ($cluster) {
    print "Checking wsresp_sst_rsync script...\n";

    my $fname = "/local/mysql/server/bin/wsrep_sst_rsync";
    open( my $in, $fname );
    my $data = join( "", <$in> );
    close($in);

    my $newdata = $data;
    $newdata =~ s|^uid =|#uid =|go;
    $newdata =~ s|^gid =|#gid =|go;

    if ( $newdata ne $data ) {
        print "Fixing uid/gid in wsrep_sst_rsync...\n";
        open( my $out, ">$fname.tmp" );
        print $out $newdata;
        close($out);
        rename( $fname . ".tmp", $fname );
    }

    print "Checking mysqld_safe script...\n";

    my $fname = "/local/mysql/server/bin/mysqld_safe";
    open( my $in, $fname );
    my $data = join( "", <$in> );
    close($in);

    my $newdata = $data;
    $newdata =~ s|^max_wsrep_restarts=\d+|max_wsrep_restarts=99999|mgo;

    if ( $newdata ne $data ) {
        print "Fixing max_wsrep_restarts in mysqld_safe...\n";
        open( my $out, ">$fname.tmp" );
        print $out $newdata;
        close($out);
        rename( $fname . ".tmp", $fname );
        chmod( 0755, $fname );
    }

    print "\n";
}

# Check mysqld_safe for bogus MY_PWD overwrite
{
    my $fname = "/local/mysql/server/bin/mysqld_safe";
    open( my $in, $fname );
    my $data = join( "", <$in> );
    close($in);

    my $repl = q(MY_PWD=`dirname $0`; MY_PWD=`dirname $MY_PWD`);

    my $newdata = $data;
    $newdata =~ s|MY_PWD='/.*?'|$repl|mgo;

    if ( $newdata ne $data ) {
        print "Fixing MY_PWD overwrite in mysqld_safe...\n";
        if ( !-e $fname . ".orig" ) {
            system( "cp", $fname, "${fname}.orig" );
        }
        open( my $out, ">$fname.tmp" );
        print $out $newdata;
        close($out);
        rename( $fname . ".tmp", $fname );
        chmod( 0755, $fname );
    }
}

print "MySQL local directory setup completed.\n";
