#!/usr/bin/perl

use strict;
use Getopt::Long;
use LWP::Simple;

my $help    = 0;
my $cluster = 0;
my $version = "5.6";
my $skip    = 0;
my $debug   = 0;
my $force   = 0;
if ( -e "/local/mysql/cluster" ) {
    $cluster = 1;
}

my @save_argv = @ARGV;

my $res = GetOptions(
    "debug+"    => \$debug,
    "cluster"   => \$cluster,
    "force"     => \$force,
    "help"      => \$help,
    "version=s" => \$version,
    "skip"      => \$skip
);
if ( !$res || $help ) {
    print "Usage: $0 [--version=$version] [--cluster] [--skip] [--debug] [--help]\n";
    exit(1);
}

if ( !-e "/local/mysql" ) {
    print "Must run from /local/mysql.\n";
    die;
}

if ( !getpwnam("mysql") ) {
    print "Userid 'mysql' must exist:\n\n";
    print "  Fedora/RH/CentOS: adduser -d /local/mysql mysql\n";
    print "  Ubuntu: adduser --quiet --gecos \"\" --disabled-password --home /local/mysql mysql\n";
    die;
}

# Determine compiled in paths for system libs
my $def_socket = "/var/lib/mysql/mysql.sock";
if ( -e "/usr/bin/mysql" ) {
    open( my $in, "-|", "strings", "/usr/bin/mysql" );
    while ( defined( my $line = <$in> ) ) {
        if ( $line =~ m|^(/.*mysqld*.sock)$|o ) {
            $def_socket = $1;
            print "Found default socket from /usr/bin/mysql: $def_socket\n";
        }
    }
    close($in);
}

# Determine env type
my $is_rpm = 0;
my $is_deb = 0;
if ( ( -e "/bin/rpm" || -e "/usr/bin/rpm" ) && ( !-e "/usr/bin/apt-get" ) ) {
    $is_rpm = 1;
}
elsif ( -e "/usr/bin/apt-get" ) {
    $ENV{DEBIAN_FRONTEND} = "noninteractive";
    $is_deb = 1;
}

chdir("/local/mysql") || die;

print "Attempting update of /local/mysql installation with version $version.\n";
if ($cluster) {
    print "Cluster mode is enabled.\n";
}
print "\n";

if ( $cluster && !-e "/local/mysql/cluster" ) {
    open( my $out, ">/local/mysql/cluster" );
    print $out "\n";
    close($out);
}

if ( !$skip ) {
    print "Attempting update from repository...\n";
    if ( -e "/local/mysql/.git" ) {
        system("git pull");
    }
    print "Done.\n";

    # re-exec to get latest changes
    print "Re-executing self to get latest changes...\n";
    exec( $0, "--skip", @save_argv );
    die "failed to re-exec self.\n";
}

my $arch = "x86_64";
if ( !-e "/lib64" ) {
    $arch = "i686";
}

my $baseurl = "http://www.percona.com";
my $listurl = "http://www.percona.com/redir/downloads/Percona-Server-$version/LATEST/binary/tarball";
if ($cluster) {
    $listurl = "http://www.percona.com/downloads/Percona-XtraDB-Cluster-56/LATEST/binary/tarball";
}

my $dlpage  = get($listurl);
my $target  = "";
my $archssl = $arch;

# https://www.percona.com/doc/percona-server/5.6/installation.html#installing-percona-server-from-a-binary-tarball
if ( -e "/lib64/libssl.so.10" ) {
    $archssl .= ".ssl101";
}
elsif ( -e "/lib/x86_64-linux-gnu/libssl.so.1.0.0" ) {
    $archssl .= ".ssl100";
}
elsif ( -e "/lib64/libssl.so.6" ) {
    $archssl .= ".ssl098e";
}
print "Attempted target: $archssl\n";

while ( $dlpage =~ m|href="([^"]+)"|sgmio ) {
    my $link = $1;
    if ( $link =~ /\.tar\.gz/ ) {
        $debug && print "Candidate: $link\n";
        if ( $link =~ /$archssl.tar.gz$/o ) {
            $target = $baseurl . $link;
            last;
        }
        elsif ( $link =~ /$arch.tar.gz$/o ) {
            $target = $baseurl . $link;
            last;
        }
    }
}

if ( !$target ) {
    die "Cannot determine download target URL.\n";
}

my $fname = $target;
$fname =~ s|.*/||g;

system( "mkdir", "-p", "/local/mysql/tar" );
my $destfile = "/local/mysql/tar/$fname";
if ( !-e $destfile ) {
    print "Downloading ($target)...\n";
    my $tmpfile = $destfile . ".tmp";
    unlink($tmpfile);

    my $res = system( "wget", "--tries=3", "-O", $tmpfile, $target );
    if ( !$res ) {
        unlink($destfile);
        rename( $tmpfile, $destfile );
    }
    else {
        die "Couldn't retrieve $target.\n";
    }
}
else {
    $debug && print "Already retrieved ($target).\n";
}

my $dirname = $fname;
$dirname =~ s/\.tar\.gz//;

if ( $dirname =~ /Percona/ && -e "/local/mysql/$dirname" && $force ) {
    system( "rm", "-rf", "/local/mysql/$dirname" );
}

if ( !-d "/local/mysql/$dirname" ) {
    print "Extracting $fname...\n";
    system( "tar", "--exclude=mysql-test", "--exclude=sql-bench", "-xzf", "tar/$fname" );
    print "Done.\n";
}
else {
    $debug && print "Already extracted $fname.\n";
}

system( "rm", "-rf", "$dirname/mysql-test" );
system( "rm", "-rf", "$dirname/sql-bench" );

system( "mkdir", "-p", "/local/mysql/data" );
system( "mkdir", "-p", "/var/lib/mysql" );

system( "chown", "-R", "mysql:mysql", "/var/lib/mysql" );

unlink("/local/mysql/server");
symlink( "/local/mysql/$dirname", "/local/mysql/server" );

if ( !-e "/local/mysql/mysql.conf" ) {
    print "Installing base config...\n";
    system( "cp", "/local/mysql/mysql-base.conf", "/local/mysql/mysql.conf" );
}

if ( -d "/etc/mysql" ) {
    unlink("/etc/mysql/my.cnf");
    system( "cp", "/local/mysql/client.conf", "/etc/mysql/my.cnf" );
    system( "chown", "root:root", "/etc/mysql/my.cnf" );
}

unlink("/etc/my.cnf");
system( "cp", "/local/mysql/client.conf", "/etc/my.cnf" );
system( "chown", "root:root", "/etc/my.cnf" );

unlink( glob("/home/local/adm/rc-start/rc.*.mysql") );
symlink( "/local/mysql/rc.mysqld", "/home/local/adm/rc-start/rc.400.mysql" );

system( "rm",    "-rf", "/local/mysql-db-backups/bin" );
system( "mkdir", "-p",  "/local/mysql-db-backups/data" );
system( "mkdir", "-p",  "/local/mysql-db-backups/latest" );
system( "chown", "-R",  "mysql:mysql", "/local/mysql" );

#
# Modify socket path in various config files
#
foreach my $cfile ( "/etc/mysql/my.cnf", "/etc/my.cnf", "/local/mysql/mysql.conf" ) {
    next if ( !-e $cfile );
    print "Updating socket path in $cfile.\n";

    open( my $in, "<$cfile" );
    my $cfg = join( "", <$in> );
    close($in);

    my $newcfg = $cfg;
    $newcfg =~ s/^socket=.*?$/socket=$def_socket/sgm;

    if ( $newcfg ne $cfg ) {
        print "Writing new version of changed file ($cfile).\n";
        open( my $out, ">$cfile" );
        print $out $newcfg;
        close($out);
    }
}

# Make sure we have libaio installed
my @aio = ( glob("/usr/lib/libaio*"), glob("/usr/lib64/libaio*"), glob("/lib/x86_64-linux-gnu/libaio*") );
if ($is_rpm) {
    if ( scalar(@aio) < 1 ) {
        print "Installing libaio...\n";
        system( "yum", "-y", "install", "libaio" );
    }

    # Make sure we have mysql client installed
    if ( !-e "/usr/bin/mysql" ) {
        system( "yum", "-y", "install", "mysql" );
    }
    if ( !-e "/usr/bin/mytop" ) {
        system( "yum", "-y", "install", "mytop" );
    }
}
elsif ($is_deb) {
    if ( scalar(@aio) < 1 ) {
        print "Installing libaio...\n";
        system( "apt-get", "-y", "install", "libaio1" );
    }

    # Make sure we have mysql client installed
    if ( !-e "/usr/bin/mysql" ) {
        system( "apt-get", "-y", "install", "mysql-client" );
    }
    if ( !-e "/usr/bin/mytop" ) {
        system( "apt-get", "-y", "install", "mytop" );
    }

}

open( my $ldd, "-|" ) || exec( "ldd", "/local/mysql/server/bin/mysqld", "/local/mysql/server/bin/mysql" );
my $need_crypto    = 0;
my $need_readline5 = 0;
my $need_libnuma   = 0;
while ( defined( my $line = <$ldd> ) ) {
    if ( $line =~ /libcrypto.so./ && $line =~ /not found/ ) {
        print "Missing required library: $line\n";
        $need_crypto++;
    }
    if ( $line =~ /readline.so.5/ && $line =~ /not found/ ) {
        print "Missing required library: $line\n";
        $need_readline5++;
    }
    if ( $line =~ /libnuma.so.1/ && $line =~ /not found/ ) {
        print "Missing required library: $line\n";
        $need_libnuma++;
    }
}
close($ldd);

if ($need_readline5) {
    print "Need to install compat-readline5\n";
    if ($is_rpm) {
        print "Installing compat-readline5...\n";
        system( "yum", "-y", "install", "compat-readline5" );
    }
    elsif ($is_deb) {
        exit;
    }

}

if ($need_libnuma) {
    print "Need to install libnuma\n";
    if ($is_rpm) {
        print "Installing numactl...\n";
        system( "yum", "-y", "install", "numactl" );
    }
    elsif ($is_deb) {
        print "Installing numactl...\n";
        system( "apt-get", "-y", "install", "numactl" );
    }
}

if ($need_crypto) {
    exit;
}

if ($cluster) {
    print "Checking wsresp_sst_rsync script...\n";

    my $fname = "/local/mysql/server/bin/wsrep_sst_rsync";
    open( my $in, $fname );
    my $data = join( "", <$in> );
    close($in);

    my $newdata = $data;
    $newdata =~ s|^uid =|#uid =|go;
    $newdata =~ s|^gid =|#gid =|go;

    if ( $newdata ne $data ) {
        print "Fixing uid/gid in wsrep_sst_rsync...\n";
        open( my $out, ">$fname.tmp" );
        print $out $newdata;
        close($out);
        rename( $fname . ".tmp", $fname );
    }

    print "Checking mysqld_safe script...\n";

    my $fname = "/local/mysql/server/bin/mysqld_safe";
    open( my $in, $fname );
    my $data = join( "", <$in> );
    close($in);

    my $newdata = $data;
    $newdata =~ s|^max_wsrep_restarts=\d+|max_wsrep_restarts=99999|mgo;

    if ( $newdata ne $data ) {
        print "Fixing max_wsrep_restarts in mysqld_safe...\n";
        open( my $out, ">$fname.tmp" );
        print $out $newdata;
        close($out);
        rename( $fname . ".tmp", $fname );
        chmod( 0755, $fname );
    }

    print "\n";
}

# Now determine and install the latest percona toolkit

if ($is_rpm) {
    my $baseurl = "http://www.percona.com";
    my $listurl = "https://www.percona.com/downloads/percona-toolkit/LATEST/";

    my $dlpage = get($listurl);
    my $target = "";

    while ( $dlpage =~ m|href="([^"]+)"|sgmio ) {
        my $link = $1;
        if ( $link =~ /\.noarch\.rpm$/ ) {
            $debug && print "Candidate: $link\n";
            $target = $baseurl . $link;
            last;
        }
    }

    if ( !$target ) {
        warn "Cannot determine download target URL for toolkit.\n";
    }

    my $rpmname = $target;
    $rpmname =~ s|.*/||g;
    $rpmname =~ s|\.rpm$||g;

    my $saw_exact_toolkit = 0;
    open( my $in, "-|" ) || exec( "rpm", "-q", $rpmname );
    while ( defined( my $line = <$in> ) ) {
        if ( $line =~ /$rpmname/ ) {
            $saw_exact_toolkit = 1;
        }
    }
    close($in);

    if ( !$saw_exact_toolkit ) {
        print "Upgrading/installing percona toolkit...\n";
        system( "yum", "-y", "localinstall", $target );
    }
}
elsif ($is_deb) {
    my $baseurl = "http://www.percona.com";
    my $listurl = "https://www.percona.com/downloads/percona-toolkit/LATEST/";

    my $dlpage = get($listurl);
    my $target = "";

    while ( $dlpage =~ m|href="([^"]+)"|sgmio ) {
        my $link = $1;
        if ( $link =~ /_all\.deb$/ ) {
            $debug && print "Candidate: $link\n";
            $target = $baseurl . $link;
            last;
        }
    }

    if ( !$target ) {
        warn "Cannot determine download target URL for toolkit.\n";
    }

    my $debname = $target;
    $debname =~ s|.*/||g;
    $debname =~ s|\.rpm$||g;

    my $saw_exact_toolkit = 0;
    my $dqry_out          = `dpkg-query -l percona-toolkit`;
    my $matchname         = $target;
    $matchname =~ s|.*/||go;
    $matchname =~ s|_all.deb||go;
    $dqry_out =~ s/\s+/_/sgmo;
    if ( $dqry_out =~ /$matchname/gmo ) {
        $saw_exact_toolkit = 1;
    }

    if ( !$saw_exact_toolkit ) {
        print "Upgrading/installing percona toolkit...\n";

        my $tmpfile = "/tmp/percona_toolkit.deb";

        unlink($tmpfile);
        system( "wget", "-O" => $tmpfile, $target );

        system( "dpkg", "-i", $tmpfile );

        unlink($tmpfile);
    }
}

print "MySQL local directory setup completed.\n";
