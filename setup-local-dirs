#!/usr/bin/perl

use strict;
use Getopt::Long;
use LWP::Simple;

my $help    = 0;
my $cluster = 0;
my $version = "5.6";
my $skip    = 0;
my $debug   = 0;
my $force   = 0;
if ( -e "/local/mysql/cluster" ) {
    $cluster = 1;
}

my @save_argv = @ARGV;

my $res = GetOptions(
    "debug+"    => \$debug,
    "cluster"   => \$cluster,
    "force"     => \$force,
    "help"      => \$help,
    "version=s" => \$version,
    "skip"      => \$skip
);
if ( !$res || $help ) {
    print "Usage: $0 [--version=$version] [--cluster] [--skip] [--debug] [--help]\n";
    exit(1);
}

chdir("/local/mysql") || die;

print "Attempting update of /local/mysql installation with version $version.\n";
if ($cluster) {
    print "Cluster mode is enabled.\n";
}
print "\n";

if ( $cluster && !-e "/local/mysql/cluster" ) {
    open( my $out, ">/local/mysql/cluster" );
    print $out "\n";
    close($out);
}

if ( !$skip ) {
    print "Attempting update from repository...\n";
    if ( -e "/local/mysql/.svn" ) {
        system("svn upgrade /local/mysql >/dev/null 2>/dev/null");
        system("svn update /local/mysql");
    }

    if ( -e "/local/mysql/.git" ) {
        system("git pull");
    }
    print "Done.\n";

    # re-exec to get latest changes
    print "Re-executing self to get latest changes...\n";
    exec( $0, "--skip", @save_argv );
    die "failed to re-exec self.\n";
}

my $arch = "x86_64";
if ( !-e "/lib64" ) {
    $arch = "i686";
}

my $baseurl = "http://www.percona.com";
my $listurl = "http://www.percona.com/redir/downloads/Percona-Server-$version/LATEST/binary/tarball";
if ($cluster) {
    $listurl = "http://www.percona.com/downloads/Percona-XtraDB-Cluster-56/LATEST/binary/linux/$arch/";
}

my $dlpage = get($listurl);
my $target = "";

while ( $dlpage =~ m|href="([^"]+)"|sgmio ) {
    my $link = $1;
    if ( $link =~ /\.tar\.gz/ ) {
        $debug && print "Candidate: $link\n";
        if ( $link =~ /$arch.tar.gz$/o ) {
            $target = $baseurl . $link;
            last;
        }
    }
}

if ( !$target ) {
    die "Cannot determine download target URL.\n";
}

my $fname = $target;
$fname =~ s|.*/||g;

system( "mkdir", "-p", "/local/mysql/tar" );
my $destfile = "/local/mysql/tar/$fname";
if ( !-e $destfile ) {
    print "Downloading ($target)...\n";
    my $tmpfile = $destfile . ".tmp";
    unlink($tmpfile);

    my $res = system( "wget", "--tries=3", "-O", $tmpfile, $target );
    if ( !$res ) {
        unlink($destfile);
        rename( $tmpfile, $destfile );
    }
    else {
        die "Couldn't retrieve $target.\n";
    }
}
else {
    $debug && print "Already retrieved ($target).\n";
}

my $dirname = $fname;
$dirname =~ s/\.tar\.gz//;

if ( $dirname =~ /Percona/ && -e "/local/mysql/$dirname" && $force ) {
    system( "rm", "-rf", "/local/mysql/$dirname" );
}

if ( !-d "/local/mysql/$dirname" ) {
    print "Extracting $fname...\n";
    system( "tar", "-xzf", "tar/$fname" );
    print "Done.\n";
}
else {
    $debug && print "Already extracted $fname.\n";
}

system( "mkdir", "-p", "/local/mysql/data" );
system( "mkdir", "-p", "/var/lib/mysql" );

system( "chown", "-R", "mysql:mysql", "/var/lib/mysql" );

unlink("/local/mysql/server");
symlink( "/local/mysql/$dirname", "/local/mysql/server" );

if ( !-e "/local/mysql/mysql.conf" ) {
    print "Installing base config...\n";
    system( "cp", "/local/mysql/mysql-base.conf", "/local/mysql/mysql.conf" );
}

unlink("/etc/my.cnf");
system( "cp", "/local/mysql/client.conf", "/etc/my.cnf" );
system( "chown", "root:root", "/etc/my.cnf" );

unlink( glob("/home/local/adm/rc-start/rc.*.mysql") );
symlink( "/local/mysql/rc.mysqld", "/home/local/adm/rc-start/rc.400.mysql" );

system( "rm",    "-rf", "/local/mysql-db-backups/bin" );
system( "mkdir", "-p",  "/local/mysql-db-backups/data" );
system( "mkdir", "-p",  "/local/mysql-db-backups/latest" );
system( "chown", "-R",  "mysql:mysql", "/local/mysql" );

open( my $ldd, "-|" ) || exec( "ldd", "/local/mysql/server/bin/mysqld" );
my $need_libs = 0;
while ( defined( my $line = <$ldd> ) ) {
    if ( $line !~ /libcrypto.so.6/ ) {
        $need_libs = 1;
    }
}
close($ldd);

if ($need_libs) {
    my @options;
    if ( $arch eq "x86_64" ) {
        @options = (
            [ "/lib64/libcrypto.so.6" => "/lib64/libcrypto.so.10" ],
            [ "/lib64/libcrypto.so.6" => "/usr/lib64/libcrypto.so.10" ],
            [ "/lib64/libssl.so.6"    => "/lib64/libssl.so.10" ],
            [ "/lib64/libssl.so.6"    => "/usr/lib64/libssl.so.10" ],
        );
    }
    else {
        @options = (
            [ "/lib/libcrypto.so.6" => "/lib/libcrypto.so.10" ],
            [ "/lib/libcrypto.so.6" => "/usr/lib/libcrypto.so.10" ],
            [ "/lib/libssl.so.6"    => "/lib/libssl.so.10" ],
            [ "/lib/libssl.so.6"    => "/usr/lib/libssl.so.10" ],
        );
    }

    foreach my $orec (@options) {
        my ( $want, $check ) = @{$orec};
        if ( !-e $want && -e $check ) {
            print "Linking $check to $want.\n";
            symlink( $check, $want );
        }
    }
}

if ($cluster) {
    print "Checking wsresp_sst_rsync script...\n";

    my $fname = "/local/mysql/server/bin/wsrep_sst_rsync";
    open( my $in, $fname );
    my $data = join( "", <$in> );
    close($in);

    my $newdata = $data;
    $newdata =~ s|^uid =|#uid =|go;
    $newdata =~ s|^gid =|#gid =|go;

    if ( $newdata ne $data ) {
        print "Fixing uid/gid in wsrep_sst_rsync...\n";
        open( my $out, ">$fname.tmp" );
        print $out $newdata;
        close($out);
        rename( $fname . ".tmp", $fname );
    }
}

# Make sure we have libaio installed
my @aio = ( glob("/usr/lib/libaio*"), glob("/usr/lib64/libaio*") );
if ( scalar(@aio) < 1 ) {
    print "Installing libaio...\n";
    system( "yum", "-y", "install", "libaio" );
}

# Make sure we have mysql client installed
if ( !-e "/usr/bin/mysql" ) {
    system( "yum", "-y", "install", "mysql" );
}
if ( !-e "/usr/bin/mytop" ) {
    system( "yum", "-y", "install", "mytop" );
}

# Now determine and install the latest percona toolkit

my $baseurl = "http://www.percona.com";
my $listurl = "http://www.percona.com/redir/downloads/percona-toolkit/LATEST/RPM/";

my $dlpage = get($listurl);
my $target = "";

while ( $dlpage =~ m|href="([^"]+)"|sgmio ) {
    my $link = $1;
    if ( $link =~ /\.noarch\.rpm$/ ) {
        $debug && print "Candidate: $link\n";
        $target = $baseurl . $link;
        last;
    }
}

if ( !$target ) {
    warn "Cannot determine download target URL for toolkit.\n";
}

my $rpmname = $target;
$rpmname =~ s|.*/||g;
$rpmname =~ s|\.rpm$||g;

my $saw_exact_toolkit = 0;
open( my $in, "-|" ) || exec( "rpm", "-q", $rpmname );
while ( defined( my $line = <$in> ) ) {
    if ( $line =~ /$rpmname/ ) {
        $saw_exact_toolkit = 1;
    }
}
close($in);

if ( !$saw_exact_toolkit ) {
    print "Upgrading/installing percona toolkit...\n";
    system( "yum", "-y", "localinstall", $target );
}

print "MySQL local directory setup completed.\n";
